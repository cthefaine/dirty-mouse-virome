#Snakefile for calling a consensus sequence using small intestine amplicon reads from
#Original ivar pipeline written by Karthik Gangavarapu, 2018 (https://github.com/andersen-lab/ivar)
#Adapted for the dirty mouse virome project by Frances Shepherd, 2020-2021

#Required format of read file names for this pipeline to work:
#Unique-sample-identifier_Replicate_read-direction
#Example: M1-AJ04-SI-kobu-3dpol_A_R1.fastq.gz

#User input required:
#in_dir <- path for raw fastq.gz files
#out_dir <- path for output files
#ref <- path for Genbank reference sequence the trimmed reads are mapped against to create a consensus sequence
#index <- path for index files of Genbank reference
#ADAPTERS <- path for Illumina adapter sequences, used for trimming raw reads

from os import listdir
from os.path import isfile, join

in_dir = "raw_reads"
out_dir = "out"
ref="MF175073.fa"
index="MF175073"
ADAPTERS="~/adapters/truseq.fa.gz"

# File name format of replicates - .fastq.gz
lst = listdir(in_dir)
files = [f for f in lst  if isfile(join(in_dir, f)) and ".fastq.gz" in f]
files.sort()

SAMPLES = []
for i in files:
    SAMPLES.append(i.split("_")[0])
SAMPLES = list(set(SAMPLES))

REPS=["A","B"]
NUM=[1,2]


rule all:
    input:
        #Consensus sequences from full pipeline
        expand("{out_dir}/consensus/{sample}.fa", out_dir = out_dir, sample = SAMPLES),
        #Trimmed raw_reads
        expand("trimmed_reads/{sample}_{rep}_R{num}_trimmed.fastq", sample=SAMPLES, rep=REPS, num=NUM),
        #Quality scores from trimmed reads
        expand("quality/fastqc_trimmed/{sample}_{rep}_R{num}_trimmed_fastqc.html", sample=SAMPLES, rep=REPS,num=NUM),
        expand("quality/fastqc_trimmed/{sample}_{rep}_R{num}_trimmed_fastqc.zip", sample=SAMPLES, rep=REPS, num=NUM),
        #Quality scores from raw reads
        expand("quality/fastqc_raw/{sample}_{rep}_R{num}_fastqc.html", sample=SAMPLES, rep=REPS, num=NUM),
        expand("quality/fastqc_raw/{sample}_{rep}_R{num}_fastqc.zip", sample=SAMPLES, rep=REPS, num=NUM)


rule call_consensus:
    input:
        "{out_dir}/merged_bams/{sample}.merged.bam"
    output:
        "{out_dir}/consensus/{sample}.fa",
        "{out_dir}/index/{sample}.bwt"
    shell:
        """
        samtools mpileup -aa -A -d 0 -Q 0 {input} | ivar consensus -p {output[0]}
        bwa index -p {wildcards.out_dir}/index/{wildcards.sample} {output[0]}
        """

rule merge_replicates:
    input:
        expand("{{out_dir}}/aligned/{{sample}}_{rep}.sorted.bam", rep = REPS)
    output:
        "{out_dir}/merged_bams/{sample}.merged.bam"
    shell:
        """
        mkdir -p $(dirname {output}/)
        samtools merge {output} {input}
        """

rule align_reads:
    input:
        expand("trimmed_reads/{{sample}}_{{rep}}_R{num}_trimmed.fastq", num=[1,2])
    params:
        index="{i}".format(i = index)
    output:
        "out/aligned/{sample}_{rep}.sorted.bam"
    shell:
        """
        mkdir -p $(dirname {output})/
        bwa mem {params.index} {input[0]} {input[1]} | samtools view -F 4 -b | samtools sort -T {wildcards.sample}_{wildcards.rep}_align -o {output}
        samtools index {output}
        """

rule fastqc_trimmed:
    input:
        "trimmed_reads/{sample}_{rep}_R{num}_trimmed.fastq"
    output:
        "quality/fastqc_trimmed/{sample}_{rep}_R{num}_trimmed_fastqc.html",
        "quality/fastqc_trimmed/{sample}_{rep}_R{num}_trimmed_fastqc.zip"
    shell:
        '''
        #!/bin/bash
        fastqc {input} -q -o quality/fastqc_trimmed/
        '''

rule adapter_quality_trim:
    input:
        r1 = expand("{in_dir}/{{sample}}_{{rep}}_R1.fastq.gz", in_dir=in_dir, sample=SAMPLES, rep=REPS),
        r2 = expand("{in_dir}/{{sample}}_{{rep}}_R2.fastq.gz", in_dir=in_dir, sample=SAMPLES, rep=REPS),
        adapters = ADAPTERS
    output:
        r1 = expand("trimmed_reads/{{sample}}_{{rep}}_R1_trimmed.fastq", sample=SAMPLES, rep=REPS),
        r2 = expand("trimmed_reads/{{sample}}_{{rep}}_R2_trimmed.fastq", sample=SAMPLES, rep=REPS)
    shell:
        """
        bbduk.sh -Xmx1g in1={input.r1} in2={input.r2} out1={output.r1} out2={output.r2} minlen=50 qtrim=rl trimq=20 ktrim=r k=25 mink=11 ref="{input.adapters}" hdist=1 tpe tbo
        """

rule fastqc:
    input:
        expand("{in_dir}/{{sample}}_{{rep}}_R{{num}}.fastq.gz", in_dir=in_dir)
    output:
        "quality/fastqc_raw/{sample}_{rep}_R{num}_fastqc.html",
        "quality/fastqc_raw/{sample}_{rep}_R{num}_fastqc.zip"
    shell:
        '''
        #!/bin/bash
        fastqc {input} -q -o quality/fastqc_raw/
        '''